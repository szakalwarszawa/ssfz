<?php
namespace Parp\SsfzBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Parp\SsfzBundle\Entity\Spolka;
use Parp\SsfzBundle\Entity\SpolkaHistoria;
use Parp\SsfzBundle\Entity\SpolkaHistoriaZmian;
use Carbon\Carbon;

/**
 * SpolkaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpolkaRepository extends EntityRepository
{

    /**
     * persists spolka
     * 
     * @param Spolka $spolka
     * @param Spolka $spolkaP
     * @param int    $idUzytkownika
     */
    public function persistSpolka(Spolka $spolka, $spolkaP, $idUzytkownika)
    {
        if (!$spolka->getLp()) {
            $spolka->setLp($this->getNastepnaLp($spolka->getUmowa()->getId()));
        }
        if ($spolka->getZakonczona() != 1) {
            $spolka->setDataWyjscia(null);
            $spolka->setKwDezinwestycji(null);
            $spolka->setZwrotInwestycji(null);
            $spolka->setNpv(null);
        }
        $this->_em->persist($spolka);
        /*
         * Zapisz aktualne dane w historii spółek
         */
        $historia = new SpolkaHistoria();
        $historia->setDataZmiany(new Carbon('Europe/Warsaw'));
        $historia->setUzytkownikId($idUzytkownika);
        $historia->setUmowaId($spolka->getUmowa()->getId());
        $historia->setLp($spolka->getLp());
        $historia->setNazwa($spolka->getNazwa());
        $historia->setForma($spolka->getForma());
        $historia->setSiedzibaMiasto($spolka->getSiedzibaMiasto());
        $historia->setSiedzibaWojewodztwo($spolka->getSiedzibaWojewodztwo());
        $historia->setBranza($spolka->getBranza());
        $historia->setOpis($spolka->getOpis());
        $historia->setDataPowolania($spolka->getDataPowolania());
        $historia->setKrs($spolka->getKrs());
        $historia->setNip($spolka->getNip());
        $historia->setKwInwestycji($spolka->getKwInwestycji());
        $historia->setKwWsparcia($spolka->getKwWsparcia());
        $historia->setKwPryw($spolka->getKwPryw());
        $historia->setZakonczona($spolka->getZakonczona());
        $historia->setDataWyjscia($spolka->getDataWyjscia());
        $historia->setKwDezinwestycji($spolka->getKwDezinwestycji());
        $historia->setZwrotInwestycji($spolka->getZwrotInwestycji());
        $historia->setNpv($spolka->getNpv());
        $historia->setUdzialowcy($spolka->getUdzialowcy());
        $historia->setPrezes($spolka->getPrezes());
        $historia->setZarzadPozostali($spolka->getZarzadPozostali());
        /*
         * Jeżeli nastąpiły zmiany w spółkach
         */
        if ($spolkaP) {
            $historia->setLpP($spolkaP->getLp());
            $historia->setNazwaP($spolkaP->getNazwa());
            $historia->setFormaP($spolkaP->getForma());
            $historia->setSiedzibaMiastoP($spolkaP->getSiedzibaMiasto());
            $historia->setSiedzibaWojewodztwoP($spolkaP->getSiedzibaWojewodztwo());
            $historia->setBranzaP($spolkaP->getBranza());
            $historia->setOpisP($spolkaP->getOpis());
            $historia->setDataPowolaniaP($spolkaP->getDataPowolania());
            $historia->setKrsP($spolkaP->getKrs());
            $historia->setNipP($spolkaP->getNip());
            $historia->setKwInwestycjiP($spolkaP->getKwInwestycji());
            $historia->setKwWsparciaP($spolkaP->getKwWsparcia());
            $historia->setKwPrywP($spolkaP->getKwPryw());
            $historia->setZakonczonaP($spolkaP->getZakonczona());
            $historia->setDataWyjsciaP($spolkaP->getDataWyjscia());
            $historia->setKwDezinwestycjiP($spolkaP->getKwDezinwestycji());
            $historia->setZwrotInwestycjiP($spolkaP->getZwrotInwestycji());
            $historia->setNpvP($spolkaP->getNpv());
            $historia->setUdzialowcyP($spolkaP->getUdzialowcy());
            $historia->setPrezesP($spolkaP->getPrezes());
            $historia->setZarzadPozostaliP($spolkaP->getZarzadPozostali());
        }
        $this->_em->persist($historia);
        $this->_em->flush();
        $historia->setSpolkaId($spolka->getId());
        $this->_em->persist($historia);
        $this->_em->flush();

        $this->compareHistoricalData($historia);
    }

    /**
     * Porównuje dane historyczne
     * 
     * @param SpolkaHistoria $historia
     */
    private function compareHistoricalData($historia)
    {
        if (strcmp($historia->getNazwa(), $historia->getNazwaP())) {
            $this->createEntry('nazwa', $historia->getNazwa(), $historia->getNazwaP(), $historia);
        }
        if (strcmp($historia->getForma(), $historia->getFormaP())) {
            $this->createEntry('forma', $historia->getForma(), $historia->getFormaP(), $historia);
        }
        if (strcmp($historia->getSiedzibaMiasto(), $historia->getSiedzibaMiastoP())) {
            $this->createEntry('siedziba_miasto', $historia->getSiedzibaMiasto(), $historia->getSiedzibaMiastoP(), $historia);
        }
        if (strcmp($historia->getSiedzibaWojewodztwo(), $historia->getSiedzibaWojewodztwoP())) {
            $this->createEntry('siedziba_wojewodztwo', $historia->getSiedzibaWojewodztwo(), $historia->getSiedzibaWojewodztwoP(), $historia);
        }     
        if (strcmp($historia->getBranza(), $historia->getBranzaP())) {
            $this->createEntry('branza', $historia->getBranza(), $historia->getBranzaP(), $historia);
        }
        if (strcmp($historia->getOpis(), $historia->getOpisP())) {
            $this->createEntry('opis', $historia->getOpis(), $historia->getOpisP(), $historia);
        }
        if ($historia->getDataPowolania() != $historia->getDataPowolaniaP()) {
            $this->createEntry('data_powolania', $historia->getDataPowolania() != null ? $historia->getDataPowolania()->format('Y-m-d H:i:s') : null, $historia->getDataPowolaniaP() != null ? $historia->getDataPowolaniaP()->format('Y-m-d H:i:s') : null, $historia);
        }
        if (strcmp($historia->getKrs(), $historia->getKrsP())) {
            $this->createEntry('krs', $historia->getKrs(), $historia->getKrsP(), $historia);
        }
        if (strcmp($historia->getNip(), $historia->getNipP())) {
            $this->createEntry('nip', $historia->getNip(), $historia->getNipP(), $historia);
        }
        if (strcmp($historia->getKwInwestycji(), $historia->getKwInwestycjiP())) {
            $this->createEntry('kw_inwestycji', $historia->getKwInwestycji(), $historia->getKwInwestycjiP(), $historia);
        }
        if (strcmp($historia->getKwWsparcia(), $historia->getKwWsparciaP())) {
            $this->createEntry('kw_wsparcia', $historia->getKwWsparcia(), $historia->getKwWsparciaP(), $historia);
        }
        if (strcmp($historia->getKwPryw(), $historia->getKwPrywP())) {
            $this->createEntry('kw_pryw', $historia->getKwPryw(), $historia->getKwPrywP(), $historia);
        }
        if ($historia->getZakonczona() != $historia->getZakonczonaP()) {
            $this->createEntry('zakonczona', $historia->getZakonczona(), $historia->getZakonczonaP(), $historia);
        }

        if ($historia->getDataWyjscia() != $historia->getDataWyjsciaP()) {
            $this->createEntry('data_wyjscia', $historia->getDataWyjscia() != null ? $historia->getDataWyjscia()->format('Y-m-d H:i:s') : null, $historia->getDataWyjsciaP() != null ? $historia->getDataWyjsciaP()->format('Y-m-d H:i:s') : null, $historia);
        }
        if (strcmp($historia->getKwDezinwestycji(), $historia->getKwDezinwestycjiP())) {
            $this->createEntry('kw_dezinwestycji', $historia->getKwDezinwestycji(), $historia->getKwDezinwestycjiP(), $historia);
        }
        if (strcmp($historia->getZwrotInwestycji(), $historia->getZwrotInwestycjiP())) {
            $this->createEntry('zwrot_inwestycji', $historia->getZwrotInwestycji(), $historia->getZwrotInwestycjiP(), $historia);
        }
        if (strcmp($historia->getNpv(), $historia->getNpvP())) {
            $this->createEntry('npv', $historia->getNpv(), $historia->getNpvP(), $historia);
        }
        if (strcmp($historia->getUdzialowcy(), $historia->getUdzialowcyP())) {
            $this->createEntry('udzialowcy', $historia->getUdzialowcy(), $historia->getUdzialowcyP(), $historia);
        }
        if (strcmp($historia->getPrezes(), $historia->getPrezesP())) {
            $this->createEntry('prezes', $historia->getPrezes(), $historia->getPrezesP(), $historia);
        }
        if (strcmp($historia->getZarzadPozostali(), $historia->getZarzadPozostaliP())) {
            $this->createEntry('zarzad_pozostali', $historia->getZarzadPozostali(), $historia->getZarzadPozostaliP(), $historia);
        }
    }

    /**
     * Wykonanie wpisu w tabeli
     * sfz_spolka_historia_zmian
     * 
     * @param string         $fieldName
     * @param string         $actual
     * @param string         $previous
     * @param SpolkaHistoria $historia
     */
    public function createEntry($fieldName, $actual, $previous, $historia)
    {
        $spolkaHistoriaZmian = new SpolkaHistoriaZmian();
        $spolkaHistoriaZmian->setSpolkaId($historia->getSpolkaId());
        $spolkaHistoriaZmian->setNazwa($historia->getNazwa());
        $spolkaHistoriaZmian->setPole($fieldName);
        $spolkaHistoriaZmian->setStaraWartosc($previous);
        $spolkaHistoriaZmian->setNowaWartosc($actual);
        $spolkaHistoriaZmian->setDataModyfikacji($historia->getDataZmiany());
        $this->_em->persist($spolkaHistoriaZmian);
        $this->_em->flush();
    }

    /**
     * Pobiera wartość Lp dla dodawanej spółki
     * 
     * @param  type $umowaId
     * @return int
     */
    public function getNastepnaLp($umowaId)
    {
        $spolki = $this->findBy(['umowaId' => $umowaId]);
        if (!$spolki) {
            return 1;
        }
        $qb = $this->createQueryBuilder('s');
        $qb->select('MAX(s.lp) as maxLp')
            ->where('s.umowaId = :umowaId')
            ->setParameter('umowaId', $umowaId);

        return $qb->getQuery()->getSingleScalarResult() + 1;
    }
}
